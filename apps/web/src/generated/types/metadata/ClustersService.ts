// @generated by protobuf-ts 2.3.0
// @generated from protobuf file "types/metadata/ClustersService.proto" (package "bluk.games", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { ServerHealth } from "../cluster/server";
import { Server } from "../cluster/server";
import { GameCluster } from "../gameCluster";
/**
 * ClustersService related
 *
 * @generated from protobuf message bluk.games.GetAllResponse
 */
export interface GetAllResponse {
    /**
     * @generated from protobuf field: repeated bluk.games.GameCluster clusters = 1;
     */
    clusters: GameCluster[];
}
/**
 * OneClusterService related
 *
 * @generated from protobuf message bluk.games.GetAllServersResponse
 */
export interface GetAllServersResponse {
    /**
     * @generated from protobuf field: repeated bluk.games.Server servers = 1;
     */
    servers: Server[];
}
/**
 * @generated from protobuf message bluk.games.CreateServerRequest
 */
export interface CreateServerRequest {
    /**
     * @generated from protobuf field: string image = 1;
     */
    image: string;
    /**
     * @generated from protobuf field: bool isPersistent = 2;
     */
    isPersistent: boolean;
}
/**
 * @generated from protobuf message bluk.games.SendServerHealthRequest
 */
export interface SendServerHealthRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: bluk.games.ServerHealth health = 2;
     */
    health?: ServerHealth;
}
// @generated message type with reflection information, may provide speed optimized methods
class GetAllResponse$Type extends MessageType<GetAllResponse> {
    constructor() {
        super("bluk.games.GetAllResponse", [
            { no: 1, name: "clusters", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => GameCluster }
        ]);
    }
    create(value?: PartialMessage<GetAllResponse>): GetAllResponse {
        const message = { clusters: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetAllResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetAllResponse): GetAllResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated bluk.games.GameCluster clusters */ 1:
                    message.clusters.push(GameCluster.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetAllResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated bluk.games.GameCluster clusters = 1; */
        for (let i = 0; i < message.clusters.length; i++)
            GameCluster.internalBinaryWrite(message.clusters[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bluk.games.GetAllResponse
 */
export const GetAllResponse = new GetAllResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetAllServersResponse$Type extends MessageType<GetAllServersResponse> {
    constructor() {
        super("bluk.games.GetAllServersResponse", [
            { no: 1, name: "servers", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Server }
        ]);
    }
    create(value?: PartialMessage<GetAllServersResponse>): GetAllServersResponse {
        const message = { servers: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetAllServersResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetAllServersResponse): GetAllServersResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated bluk.games.Server servers */ 1:
                    message.servers.push(Server.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetAllServersResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated bluk.games.Server servers = 1; */
        for (let i = 0; i < message.servers.length; i++)
            Server.internalBinaryWrite(message.servers[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bluk.games.GetAllServersResponse
 */
export const GetAllServersResponse = new GetAllServersResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateServerRequest$Type extends MessageType<CreateServerRequest> {
    constructor() {
        super("bluk.games.CreateServerRequest", [
            { no: 1, name: "image", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "isPersistent", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<CreateServerRequest>): CreateServerRequest {
        const message = { image: "", isPersistent: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateServerRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateServerRequest): CreateServerRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string image */ 1:
                    message.image = reader.string();
                    break;
                case /* bool isPersistent */ 2:
                    message.isPersistent = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateServerRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string image = 1; */
        if (message.image !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.image);
        /* bool isPersistent = 2; */
        if (message.isPersistent !== false)
            writer.tag(2, WireType.Varint).bool(message.isPersistent);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bluk.games.CreateServerRequest
 */
export const CreateServerRequest = new CreateServerRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SendServerHealthRequest$Type extends MessageType<SendServerHealthRequest> {
    constructor() {
        super("bluk.games.SendServerHealthRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "health", kind: "message", T: () => ServerHealth }
        ]);
    }
    create(value?: PartialMessage<SendServerHealthRequest>): SendServerHealthRequest {
        const message = { id: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SendServerHealthRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SendServerHealthRequest): SendServerHealthRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* bluk.games.ServerHealth health */ 2:
                    message.health = ServerHealth.internalBinaryRead(reader, reader.uint32(), options, message.health);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SendServerHealthRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* bluk.games.ServerHealth health = 2; */
        if (message.health)
            ServerHealth.internalBinaryWrite(message.health, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bluk.games.SendServerHealthRequest
 */
export const SendServerHealthRequest = new SendServerHealthRequest$Type();
