// @generated by protobuf-ts 2.3.0
// @generated from protobuf file "PermissionsService.proto" (package "bluk.games", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Permission } from "./types/permissions";
/**
 * Requests/Responses
 *
 * @generated from protobuf message bluk.games.GetUserPermissionsRequest
 */
export interface GetUserPermissionsRequest {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
}
/**
 * @generated from protobuf message bluk.games.GetUserPermissionsResponse
 */
export interface GetUserPermissionsResponse {
    /**
     * @generated from protobuf field: repeated bluk.games.Permission permissions = 1;
     */
    permissions: Permission[];
}
// @generated message type with reflection information, may provide speed optimized methods
class GetUserPermissionsRequest$Type extends MessageType<GetUserPermissionsRequest> {
    constructor() {
        super("bluk.games.GetUserPermissionsRequest", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetUserPermissionsRequest>): GetUserPermissionsRequest {
        const message = { id: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetUserPermissionsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetUserPermissionsRequest): GetUserPermissionsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetUserPermissionsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bluk.games.GetUserPermissionsRequest
 */
export const GetUserPermissionsRequest = new GetUserPermissionsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetUserPermissionsResponse$Type extends MessageType<GetUserPermissionsResponse> {
    constructor() {
        super("bluk.games.GetUserPermissionsResponse", [
            { no: 1, name: "permissions", kind: "enum", repeat: 1 /*RepeatType.PACKED*/, T: () => ["bluk.games.Permission", Permission] }
        ]);
    }
    create(value?: PartialMessage<GetUserPermissionsResponse>): GetUserPermissionsResponse {
        const message = { permissions: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetUserPermissionsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetUserPermissionsResponse): GetUserPermissionsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated bluk.games.Permission permissions */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.permissions.push(reader.int32());
                    else
                        message.permissions.push(reader.int32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetUserPermissionsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated bluk.games.Permission permissions = 1; */
        if (message.permissions.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.permissions.length; i++)
                writer.int32(message.permissions[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message bluk.games.GetUserPermissionsResponse
 */
export const GetUserPermissionsResponse = new GetUserPermissionsResponse$Type();
/**
 * @generated ServiceType for protobuf service bluk.games.PermissionService
 */
export const PermissionService = new ServiceType("bluk.games.PermissionService", [
    { name: "GetUserPermissions", options: {}, I: GetUserPermissionsRequest, O: GetUserPermissionsResponse }
]);
