// @generated by protobuf-ts 2.3.0
// @generated from protobuf file "library.proto" (package "bluk_games", syntax proto3)
// tslint:disable
import { NewsService } from "./library";
import type { NewsPost } from "./types/news";
import { GameService } from "./library";
import type { CreateRequest } from "./types/metadata/GameService";
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { GamesListService } from "./library";
import type { FetchFeaturedResponse } from "./types/metadata/GamesListService";
import type { EmptyRequest } from "./types/miscellaneous";
import type { Game } from "./types/game";
import type { GetOneById } from "./types/metadata/GamesListService";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { SearchResponse } from "./types/metadata/GamesListService";
import type { SearchRequest } from "./types/metadata/GamesListService";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Service
 *
 * @generated from protobuf service bluk_games.GamesListService
 */
export interface IGamesListServiceClient {
    /**
     * @generated from protobuf rpc: Search(SearchRequest) returns (SearchResponse);
     */
    search(input: SearchRequest, options?: RpcOptions): UnaryCall<SearchRequest, SearchResponse>;
    /**
     * @generated from protobuf rpc: GetOne(GetOneById) returns (Game);
     */
    getOne(input: GetOneById, options?: RpcOptions): UnaryCall<GetOneById, Game>;
    /**
     * @generated from protobuf rpc: FetchFeatured(EmptyRequest) returns (FetchFeaturedResponse);
     */
    fetchFeatured(input: EmptyRequest, options?: RpcOptions): UnaryCall<EmptyRequest, FetchFeaturedResponse>;
}
/**
 * Service
 *
 * @generated from protobuf service bluk_games.GamesListService
 */
export class GamesListServiceClient implements IGamesListServiceClient, ServiceInfo {
    typeName = GamesListService.typeName;
    methods = GamesListService.methods;
    options = GamesListService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Search(SearchRequest) returns (SearchResponse);
     */
    search(input: SearchRequest, options?: RpcOptions): UnaryCall<SearchRequest, SearchResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<SearchRequest, SearchResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetOne(GetOneById) returns (Game);
     */
    getOne(input: GetOneById, options?: RpcOptions): UnaryCall<GetOneById, Game> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetOneById, Game>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: FetchFeatured(EmptyRequest) returns (FetchFeaturedResponse);
     */
    fetchFeatured(input: EmptyRequest, options?: RpcOptions): UnaryCall<EmptyRequest, FetchFeaturedResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<EmptyRequest, FetchFeaturedResponse>("unary", this._transport, method, opt, input);
    }
}
/**
 * @generated from protobuf service bluk_games.GameService
 */
export interface IGameServiceClient {
    /**
     * @generated from protobuf rpc: Create(CreateRequest) returns (Game);
     */
    create(input: CreateRequest, options?: RpcOptions): UnaryCall<CreateRequest, Game>;
    /**
     * @generated from protobuf rpc: Update(Game) returns (Game);
     */
    update(input: Game, options?: RpcOptions): UnaryCall<Game, Game>;
}
/**
 * @generated from protobuf service bluk_games.GameService
 */
export class GameServiceClient implements IGameServiceClient, ServiceInfo {
    typeName = GameService.typeName;
    methods = GameService.methods;
    options = GameService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Create(CreateRequest) returns (Game);
     */
    create(input: CreateRequest, options?: RpcOptions): UnaryCall<CreateRequest, Game> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateRequest, Game>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Update(Game) returns (Game);
     */
    update(input: Game, options?: RpcOptions): UnaryCall<Game, Game> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<Game, Game>("unary", this._transport, method, opt, input);
    }
}
/**
 * @generated from protobuf service bluk_games.NewsService
 */
export interface INewsServiceClient {
    /**
     * @generated from protobuf rpc: FetchMain(EmptyRequest) returns (NewsPost);
     */
    fetchMain(input: EmptyRequest, options?: RpcOptions): UnaryCall<EmptyRequest, NewsPost>;
}
/**
 * @generated from protobuf service bluk_games.NewsService
 */
export class NewsServiceClient implements INewsServiceClient, ServiceInfo {
    typeName = NewsService.typeName;
    methods = NewsService.methods;
    options = NewsService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: FetchMain(EmptyRequest) returns (NewsPost);
     */
    fetchMain(input: EmptyRequest, options?: RpcOptions): UnaryCall<EmptyRequest, NewsPost> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<EmptyRequest, NewsPost>("unary", this._transport, method, opt, input);
    }
}
