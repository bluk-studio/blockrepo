// @generated by protobuf-ts 2.3.0
// @generated from protobuf file "users.proto" (package "bluk_games", syntax proto3)
// tslint:disable
import { TokenService } from "./users";
import type { FetchTokenRequest } from "./users";
import type { Token } from "./types/token";
import type { GenerateTokenRequest } from "./users";
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { UserService } from "./users";
import type { AuthorizeAuthTokenRequest } from "./types/metadata/UsersService";
import type { WatchAuthTokenRequest } from "./types/metadata/UsersService";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { AuthToken } from "./types/token";
import type { EmptyRequest } from "./types/miscellaneous";
import type { FetchMeResponse } from "./users";
import type { FetchMeRequest } from "./users";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { User } from "./types/user";
import type { FindOneUserRequest } from "./users";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Services
 *
 * @generated from protobuf service bluk_games.UserService
 */
export interface IUserServiceClient {
    /**
     * @generated from protobuf rpc: FindOne(bluk_games.FindOneUserRequest) returns (User);
     */
    findOne(input: FindOneUserRequest, options?: RpcOptions): UnaryCall<FindOneUserRequest, User>;
    /**
     * @generated from protobuf rpc: FetchMe(bluk_games.FetchMeRequest) returns (bluk_games.FetchMeResponse);
     */
    fetchMe(input: FetchMeRequest, options?: RpcOptions): UnaryCall<FetchMeRequest, FetchMeResponse>;
    /**
     * Auth-token related (for authorization inside minecraft)
     *
     * @generated from protobuf rpc: CreateAuthToken(EmptyRequest) returns (AuthToken);
     */
    createAuthToken(input: EmptyRequest, options?: RpcOptions): UnaryCall<EmptyRequest, AuthToken>;
    /**
     * @generated from protobuf rpc: WatchAuthToken(WatchAuthTokenRequest) returns (stream AuthToken);
     */
    watchAuthToken(input: WatchAuthTokenRequest, options?: RpcOptions): ServerStreamingCall<WatchAuthTokenRequest, AuthToken>;
    /**
     * @generated from protobuf rpc: AuthorizeAuthToken(AuthorizeAuthTokenRequest) returns (AuthToken);
     */
    authorizeAuthToken(input: AuthorizeAuthTokenRequest, options?: RpcOptions): UnaryCall<AuthorizeAuthTokenRequest, AuthToken>;
}
/**
 * Services
 *
 * @generated from protobuf service bluk_games.UserService
 */
export class UserServiceClient implements IUserServiceClient, ServiceInfo {
    typeName = UserService.typeName;
    methods = UserService.methods;
    options = UserService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: FindOne(bluk_games.FindOneUserRequest) returns (User);
     */
    findOne(input: FindOneUserRequest, options?: RpcOptions): UnaryCall<FindOneUserRequest, User> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<FindOneUserRequest, User>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: FetchMe(bluk_games.FetchMeRequest) returns (bluk_games.FetchMeResponse);
     */
    fetchMe(input: FetchMeRequest, options?: RpcOptions): UnaryCall<FetchMeRequest, FetchMeResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<FetchMeRequest, FetchMeResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * Auth-token related (for authorization inside minecraft)
     *
     * @generated from protobuf rpc: CreateAuthToken(EmptyRequest) returns (AuthToken);
     */
    createAuthToken(input: EmptyRequest, options?: RpcOptions): UnaryCall<EmptyRequest, AuthToken> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<EmptyRequest, AuthToken>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: WatchAuthToken(WatchAuthTokenRequest) returns (stream AuthToken);
     */
    watchAuthToken(input: WatchAuthTokenRequest, options?: RpcOptions): ServerStreamingCall<WatchAuthTokenRequest, AuthToken> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<WatchAuthTokenRequest, AuthToken>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: AuthorizeAuthToken(AuthorizeAuthTokenRequest) returns (AuthToken);
     */
    authorizeAuthToken(input: AuthorizeAuthTokenRequest, options?: RpcOptions): UnaryCall<AuthorizeAuthTokenRequest, AuthToken> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<AuthorizeAuthTokenRequest, AuthToken>("unary", this._transport, method, opt, input);
    }
}
/**
 * @generated from protobuf service bluk_games.TokenService
 */
export interface ITokenServiceClient {
    /**
     * @generated from protobuf rpc: GenerateToken(bluk_games.GenerateTokenRequest) returns (Token);
     */
    generateToken(input: GenerateTokenRequest, options?: RpcOptions): UnaryCall<GenerateTokenRequest, Token>;
    /**
     * @generated from protobuf rpc: FetchToken(bluk_games.FetchTokenRequest) returns (Token);
     */
    fetchToken(input: FetchTokenRequest, options?: RpcOptions): UnaryCall<FetchTokenRequest, Token>;
}
/**
 * @generated from protobuf service bluk_games.TokenService
 */
export class TokenServiceClient implements ITokenServiceClient, ServiceInfo {
    typeName = TokenService.typeName;
    methods = TokenService.methods;
    options = TokenService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: GenerateToken(bluk_games.GenerateTokenRequest) returns (Token);
     */
    generateToken(input: GenerateTokenRequest, options?: RpcOptions): UnaryCall<GenerateTokenRequest, Token> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GenerateTokenRequest, Token>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: FetchToken(bluk_games.FetchTokenRequest) returns (Token);
     */
    fetchToken(input: FetchTokenRequest, options?: RpcOptions): UnaryCall<FetchTokenRequest, Token> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<FetchTokenRequest, Token>("unary", this._transport, method, opt, input);
    }
}
