// @generated by protobuf-ts 2.3.0
// @generated from protobuf file "ClustersService.proto" (package "bluk_games", syntax proto3)
// tslint:disable
import { OneClusterService } from "./ClustersService";
import type { ServerHealth } from "./types/cluster/server";
import type { SendServerHealthRequest } from "./types/metadata/ClustersService";
import type { ClusterHealth } from "./types/cluster/health";
import type { Server } from "./types/cluster/server";
import type { CreateServerRequest } from "./types/metadata/ClustersService";
import type { GetAllServersResponse } from "./types/metadata/ClustersService";
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { ClustersService } from "./ClustersService";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { GetAllResponse } from "./types/metadata/ClustersService";
import type { EmptyRequest } from "./types/miscellaneous";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Library's service ClustersService
 *
 * @generated from protobuf service bluk_games.ClustersService
 */
export interface IClustersServiceClient {
    /**
     * @generated from protobuf rpc: GetAll(EmptyRequest) returns (GetAllResponse);
     */
    getAll(input: EmptyRequest, options?: RpcOptions): UnaryCall<EmptyRequest, GetAllResponse>;
}
/**
 * Library's service ClustersService
 *
 * @generated from protobuf service bluk_games.ClustersService
 */
export class ClustersServiceClient implements IClustersServiceClient, ServiceInfo {
    typeName = ClustersService.typeName;
    methods = ClustersService.methods;
    options = ClustersService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: GetAll(EmptyRequest) returns (GetAllResponse);
     */
    getAll(input: EmptyRequest, options?: RpcOptions): UnaryCall<EmptyRequest, GetAllResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<EmptyRequest, GetAllResponse>("unary", this._transport, method, opt, input);
    }
}
/**
 * Cluster specific service
 *
 * @generated from protobuf service bluk_games.OneClusterService
 */
export interface IOneClusterServiceClient {
    /**
     * Servers-related
     *
     * @generated from protobuf rpc: GetAllServers(EmptyRequest) returns (GetAllServersResponse);
     */
    getAllServers(input: EmptyRequest, options?: RpcOptions): UnaryCall<EmptyRequest, GetAllServersResponse>;
    /**
     * @generated from protobuf rpc: CreateServer(CreateServerRequest) returns (Server);
     */
    createServer(input: CreateServerRequest, options?: RpcOptions): UnaryCall<CreateServerRequest, Server>;
    /**
     * Cluster's Health related
     *
     * @generated from protobuf rpc: GetClusterHealth(EmptyRequest) returns (ClusterHealth);
     */
    getClusterHealth(input: EmptyRequest, options?: RpcOptions): UnaryCall<EmptyRequest, ClusterHealth>;
    /**
     * @generated from protobuf rpc: SendServerHealth(SendServerHealthRequest) returns (ServerHealth);
     */
    sendServerHealth(input: SendServerHealthRequest, options?: RpcOptions): UnaryCall<SendServerHealthRequest, ServerHealth>;
}
/**
 * Cluster specific service
 *
 * @generated from protobuf service bluk_games.OneClusterService
 */
export class OneClusterServiceClient implements IOneClusterServiceClient, ServiceInfo {
    typeName = OneClusterService.typeName;
    methods = OneClusterService.methods;
    options = OneClusterService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * Servers-related
     *
     * @generated from protobuf rpc: GetAllServers(EmptyRequest) returns (GetAllServersResponse);
     */
    getAllServers(input: EmptyRequest, options?: RpcOptions): UnaryCall<EmptyRequest, GetAllServersResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<EmptyRequest, GetAllServersResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: CreateServer(CreateServerRequest) returns (Server);
     */
    createServer(input: CreateServerRequest, options?: RpcOptions): UnaryCall<CreateServerRequest, Server> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateServerRequest, Server>("unary", this._transport, method, opt, input);
    }
    /**
     * Cluster's Health related
     *
     * @generated from protobuf rpc: GetClusterHealth(EmptyRequest) returns (ClusterHealth);
     */
    getClusterHealth(input: EmptyRequest, options?: RpcOptions): UnaryCall<EmptyRequest, ClusterHealth> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<EmptyRequest, ClusterHealth>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: SendServerHealth(SendServerHealthRequest) returns (ServerHealth);
     */
    sendServerHealth(input: SendServerHealthRequest, options?: RpcOptions): UnaryCall<SendServerHealthRequest, ServerHealth> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<SendServerHealthRequest, ServerHealth>("unary", this._transport, method, opt, input);
    }
}
