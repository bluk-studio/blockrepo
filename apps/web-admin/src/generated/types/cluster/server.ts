// @generated by protobuf-ts 2.3.0
// @generated from protobuf file "types/cluster/server.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message Server
 */
export interface Server {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string image = 2;
     */
    image: string;
    /**
     * @generated from protobuf field: int32 port = 3;
     */
    port: number;
    /**
     * @generated from protobuf field: ServerHealth health = 4;
     */
    health?: ServerHealth;
}
/**
 * @generated from protobuf message ServerHealth
 */
export interface ServerHealth {
    /**
     * @generated from protobuf field: bool isRunning = 1;
     */
    isRunning: boolean;
    /**
     * @generated from protobuf field: bool isReady = 2;
     */
    isReady: boolean;
}
// @generated message type with reflection information, may provide speed optimized methods
class Server$Type extends MessageType<Server> {
    constructor() {
        super("Server", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "image", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "port", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "health", kind: "message", T: () => ServerHealth }
        ]);
    }
    create(value?: PartialMessage<Server>): Server {
        const message = { id: "", image: "", port: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Server>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Server): Server {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string image */ 2:
                    message.image = reader.string();
                    break;
                case /* int32 port */ 3:
                    message.port = reader.int32();
                    break;
                case /* ServerHealth health */ 4:
                    message.health = ServerHealth.internalBinaryRead(reader, reader.uint32(), options, message.health);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Server, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string image = 2; */
        if (message.image !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.image);
        /* int32 port = 3; */
        if (message.port !== 0)
            writer.tag(3, WireType.Varint).int32(message.port);
        /* ServerHealth health = 4; */
        if (message.health)
            ServerHealth.internalBinaryWrite(message.health, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Server
 */
export const Server = new Server$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServerHealth$Type extends MessageType<ServerHealth> {
    constructor() {
        super("ServerHealth", [
            { no: 1, name: "isRunning", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "isReady", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ServerHealth>): ServerHealth {
        const message = { isRunning: false, isReady: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ServerHealth>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServerHealth): ServerHealth {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool isRunning */ 1:
                    message.isRunning = reader.bool();
                    break;
                case /* bool isReady */ 2:
                    message.isReady = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServerHealth, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool isRunning = 1; */
        if (message.isRunning !== false)
            writer.tag(1, WireType.Varint).bool(message.isRunning);
        /* bool isReady = 2; */
        if (message.isReady !== false)
            writer.tag(2, WireType.Varint).bool(message.isReady);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ServerHealth
 */
export const ServerHealth = new ServerHealth$Type();
