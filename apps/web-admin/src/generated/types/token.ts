// @generated by protobuf-ts 2.3.0
// @generated from protobuf file "types/token.proto" (syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Permission } from "./permissions";
/**
 * Token message
 *
 * @generated from protobuf message Token
 */
export interface Token {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: TokenType type = 2;
     */
    type: TokenType;
    /**
     * @generated from protobuf field: string entityId = 3;
     */
    entityId: string;
    /**
     * @generated from protobuf field: repeated Permission permissions = 4;
     */
    permissions: Permission[];
}
/**
 * AuthToken
 *
 * @generated from protobuf message AuthToken
 */
export interface AuthToken {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string uid = 2;
     */
    uid: string;
    /**
     * @generated from protobuf field: bool isAuthorized = 3;
     */
    isAuthorized: boolean;
}
/**
 * TokenType enum
 *
 * @generated from protobuf enum TokenType
 */
export enum TokenType {
    /**
     * @generated from protobuf enum value: USER = 0;
     */
    USER = 0,
    /**
     * @generated from protobuf enum value: ROBOT = 1;
     */
    ROBOT = 1
}
// @generated message type with reflection information, may provide speed optimized methods
class Token$Type extends MessageType<Token> {
    constructor() {
        super("Token", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "type", kind: "enum", T: () => ["TokenType", TokenType] },
            { no: 3, name: "entityId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "permissions", kind: "enum", repeat: 1 /*RepeatType.PACKED*/, T: () => ["Permission", Permission] }
        ]);
    }
    create(value?: PartialMessage<Token>): Token {
        const message = { id: "", type: 0, entityId: "", permissions: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Token>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Token): Token {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* TokenType type */ 2:
                    message.type = reader.int32();
                    break;
                case /* string entityId */ 3:
                    message.entityId = reader.string();
                    break;
                case /* repeated Permission permissions */ 4:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.permissions.push(reader.int32());
                    else
                        message.permissions.push(reader.int32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Token, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* TokenType type = 2; */
        if (message.type !== 0)
            writer.tag(2, WireType.Varint).int32(message.type);
        /* string entityId = 3; */
        if (message.entityId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.entityId);
        /* repeated Permission permissions = 4; */
        if (message.permissions.length) {
            writer.tag(4, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.permissions.length; i++)
                writer.int32(message.permissions[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message Token
 */
export const Token = new Token$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AuthToken$Type extends MessageType<AuthToken> {
    constructor() {
        super("AuthToken", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "uid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "isAuthorized", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<AuthToken>): AuthToken {
        const message = { id: "", uid: "", isAuthorized: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AuthToken>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AuthToken): AuthToken {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string uid */ 2:
                    message.uid = reader.string();
                    break;
                case /* bool isAuthorized */ 3:
                    message.isAuthorized = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AuthToken, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string uid = 2; */
        if (message.uid !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.uid);
        /* bool isAuthorized = 3; */
        if (message.isAuthorized !== false)
            writer.tag(3, WireType.Varint).bool(message.isAuthorized);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message AuthToken
 */
export const AuthToken = new AuthToken$Type();
